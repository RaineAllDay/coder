Creates many users, then creates a workspace for each user and waits for them finish building and fully come online. Optionally runs a command inside each workspace, and connects to the workspace over WireGuard.

It is recommended that all rate limits are disabled on the server before running this scaletest. This test generates many login events which will be rate limited against the (most likely single) IP.

Usage:
  coder scaletest create-workspaces [flags]

Options
      --cleanup-concurrency int   (default 1)
          $$CODER_LOADTEST_CLEANUP_CONCURRENCY
          Number of concurrent cleanup jobs to run. 0 means unlimited.
          
      --cleanup-job-timeout duration   (default 5m0s)
          $$CODER_LOADTEST_CLEANUP_JOB_TIMEOUT
          Timeout per job. Jobs may take longer to complete under higher
          concurrency limits.
          
      --cleanup-timeout duration   (default 30m0s)
          $$CODER_LOADTEST_CLEANUP_TIMEOUT
          Timeout for the entire cleanup run. 0 means unlimited.
          
      --concurrency int   (default 1)
          $$CODER_LOADTEST_CONCURRENCY
          Number of concurrent jobs to run. 0 means unlimited.
          
      --connect-hold duration   (default 30s)
          $$CODER_LOADTEST_CONNECT_HOLD
          How long to hold the WireGuard connection open for.
          
      --connect-interval duration   (default 1s)
          $$CODER_LOADTEST_CONNECT_INTERVAL
          How long to wait between making requests to the --connect-url once the
          connection is established.
          
      --connect-mode string   (default "derp")
          $$CODER_LOADTEST_CONNECT_MODE
          Mode to use for connecting to the workspace. Can be 'derp' or 'direct'.
          
      --connect-timeout duration   (default 5s)
          $$CODER_LOADTEST_CONNECT_TIMEOUT
          Timeout for each request to the --connect-url.
          
      --connect-url string  
          $$CODER_LOADTEST_CONNECT_URL
          URL to connect to inside the the workspace over WireGuard. If not
          specified, no connections will be made over WireGuard.
          
  -c, --count int   (default 1)
          $$CODER_LOADTEST_COUNT
          Required: Number of workspaces to create.
          
  -h, --help  
          help for create-workspaces.
          
      --job-timeout duration   (default 5m0s)
          $$CODER_LOADTEST_JOB_TIMEOUT
          Timeout per job. Jobs may take longer to complete under higher
          concurrency limits.
          
      --no-cleanup coder scaletest cleanup  
          $$CODER_LOADTEST_NO_CLEANUP
          Do not clean up resources after the test completes. You can cleanup
          manually using coder scaletest cleanup.
          
      --no-plan  
          $$CODER_LOADTEST_NO_PLAN
          Skip the dry-run step to plan the workspace creation. This step
          ensures that the given parameters are valid for the given template.
          
      --no-wait-for-agents  
          $$CODER_LOADTEST_NO_WAIT_FOR_AGENTS
          Do not wait for agents to start before marking the test as succeeded.
          This can be useful if you are running the test against a template that
          does not start the agent quickly.
          
      --output stringArray   (default [text])
          $$CODER_SCALETEST_OUTPUTS
          Output format specs in the format "<format>[:<path>]". Not specifying
          a path will default to stdout. Available formats: text, json.
          
      --parameter stringArray  
          $$CODER_LOADTEST_PARAMETERS
          Parameters to use for each workspace. Can be specified multiple times.
          Overrides any existing parameters with the same name from
          --parameters-file. Format: key=value.
          
      --parameters-file string  
          $$CODER_LOADTEST_PARAMETERS_FILE
          Path to a YAML file containing the parameters to use for each workspace.
          
      --run-command string  
          $$CODER_LOADTEST_RUN_COMMAND
          Command to run inside each workspace using reconnecting-pty (i.e. web
          terminal protocol). If not specified, no command will be run.
          
      --run-expect-output string  
          $$CODER_LOADTEST_RUN_EXPECT_OUTPUT
          Expect the command to output the given string (on a single line). If
          the command does not output the given string, it will be marked as failed.
          
      --run-expect-timeout  
          $$CODER_LOADTEST_RUN_EXPECT_TIMEOUT
          Expect the command to timeout. If the command does not finish within
          the given --run-timeout, it will be marked as succeeded. If the
          command finishes before the timeout, it will be marked as failed.
          
      --run-log-output  
          $$CODER_LOADTEST_RUN_LOG_OUTPUT
          Log the output of the command to the test logs. This should be left
          off unless you expect small amounts of output. Large amounts of output
          will cause high memory usage.
          
      --run-timeout duration   (default 5s)
          $$CODER_LOADTEST_RUN_TIMEOUT
          Timeout for the command to complete.
          
  -t, --template string  
          $$CODER_LOADTEST_TEMPLATE
          Required: Name or ID of the template to use for workspaces.
          
      --timeout duration   (default 30m0s)
          $$CODER_LOADTEST_TIMEOUT
          Timeout for the entire test run. 0 means unlimited.
          
      --trace  
          $$CODER_LOADTEST_TRACE
          Whether application tracing data is collected. It exports to a backend
          configured by environment variables. See:
          https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/protocol/exporter.md.
          
      --trace-coder  
          $$CODER_LOADTEST_TRACE_CODER
          Whether opentelemetry traces are sent to Coder. We recommend keeping
          this disabled unless we advise you to enable it.
          
      --trace-honeycomb-api-key string  
          $$CODER_LOADTEST_TRACE_HONEYCOMB_API_KEY
          Enables trace exporting to Honeycomb.io using the provided API key.
          
      --trace-propagate  
          $$CODER_LOADTEST_TRACE_PROPAGATE
          Enables trace propagation to the Coder backend, which will be used to
          correlate server-side spans with client-side spans. Only enable this
          if the server is configured with the exact same tracing configuration
          as the client.
